import random
import time


def get_me_random_list(n):
    """Generate a list of n random integers between 1 and 100000."""
    return [random.randint(1, 100000) for _ in range(n)]

def insertion_sort(a_list):
    """Perform insertion sort and return the time taken."""
    start_time = time.time()
    
    for index in range(1, len(a_list)):
        current_value = a_list[index]
        position = index

        while position > 0 and a_list[position - 1] > current_value:
            a_list[position] = a_list[position - 1]
            position = position - 1

        a_list[position] = current_value

    return time.time() - start_time

def shell_sort(a_list):
    """Perform shell sort and return the time taken."""
    start_time = time.time()
    
    sublist_count = len(a_list) // 2
    while sublist_count > 0:
        for start_position in range(sublist_count):
            gap_insertion_sort(a_list, start_position, sublist_count)
        sublist_count = sublist_count // 2

    return time.time() - start_time

def gap_insertion_sort(a_list, start, gap):
    """Helper function for shell_sort."""
    for i in range(start + gap, len(a_list), gap):
        current_value = a_list[i]
        position = i

        while position >= gap and a_list[position - gap] > current_value:
            a_list[position] = a_list[position - gap]
            position = position - gap

        a_list[position] = current_value


def python_sort(a_list):
    """Use Python's built-in sort() and return the time taken."""
    start_time = time.time()
    a_list.sort()
    return time.time() - start_time


def benchmark_sort_algorithms():
    sizes = [500, 1000, 5000]  
    num_trials = 100            

    for size in sizes:
        print(f"\nList size: {size}")

        total_time_insertion = 0
        total_time_shell = 0
        total_time_python = 0

        for _ in range(num_trials):
            
            mylist = get_me_random_list(size)

            
            list_copy = mylist[:]
            total_time_insertion += insertion_sort(list_copy)


            list_copy = mylist[:]
            total_time_shell += shell_sort(list_copy)

        
            list_copy = mylist[:]
            total_time_python += python_sort(list_copy)

       
        print(f"Insertion Sort took {total_time_insertion / num_trials:10.7f} seconds to run, on average")
        print(f"Shell Sort took      {total_time_shell / num_trials:10.7f} seconds to run, on average")
        print(f"Python Sort took     {total_time_python / num_trials:10.7f} seconds to run, on average")


if __name__ == "__main__":
    benchmark_sort_algorithms()
